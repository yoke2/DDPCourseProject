fit5 <- lm(mpg~I(wt*3),mtcars)
coef(fit5)
newdata
newdata <- 3
newdata
newdata <- data.frame(3)
newdata
names(newdata) <- "wt"
newdata
predict(fit3, newdata, interval="confidence")
fit5 <- lm(mpg ~ I(wt*1000), mtcars)
newdata <- data.frame(wt=3000)
newdata
predict(fit5, newdata, interval="confidence")
newdata <- data.frame(wt=3)
predict(fit3, newdata, interval="confidence")
predict(fit3, newdata, interval="prediction")
fit6 <- lm(mpg~I(wt/2),mtcars)
newdata <- data.frame(wt=1)
predict(fit6, newdata, interval="confidence")
newdata <- data.frame(wt=1\2)
newdata <- data.frame(wt=2)
predict(fit3, newdata, interval="prediction")
predict(fit3, newdata, interval="confidence")
newdata <- data.frame(wt=1)
predict(fit6, newdata, interval="confidence")
fit6 <- lm(mpg~I(wt*2000),mtcars)
predict(fit6, newdata, interval="confidence")
fit6 <- lm(mpg~I(wt*2),mtcars)
predict(fit6, newdata, interval="confidence")
predict(fit6, newdata, interval="confidence")
newdata <- data.frame(wt=2000)
predict(fit6, newdata, interval="confidence")
fit6 <- lm(mpg~I(wt*1/2),mtcars)
summary(fit6)
predict(fit6, newdata=data.frame(wt=1), interval="confidence")
predict(fit6, newdata=data.frame(wt=2), interval="confidence")
predict(fit6, newdata=data.frame(wt=4), interval="confidence")
summary(fit3)
fit3$r.squared
coef(fit3)
summary(fit3)$r.squared
data(mtcars)
fit6 <- lm(mpg ~ I(wt*1/2), mtcars)
predict(fit6, data.frame(wt=2), "confidence")
predict(fit6, data.frame(wt=2), interval="confidence")
fit6 <- lm(mpg ~ I(wt*2), mtcars)
predict(fit6, data.frame(wt=2), interval="confidence")
predict(fit6, data.frame(wt=1/2), interval="confidence")
sumCoef <- summary(fit6)$coefficient
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2
]
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit6$df) * sumCoef[1, 2]
fit6 <- lm(mpg ~ I(wt*1/2), mtcars)
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit6$df) * sumCoef[1, 2]
predict(fit6, data.frame(wt=1), interval="confidence")
predict(fit6, data.frame(wt=2), interval="confidence")
fit6 <- lm(mpg ~ I(wt*1/2)-1, mtcars)
predict(fit6, data.frame(wt=2), interval="confidence")
predict(fit6, data.frame(wt=1), interval="confidence")
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit6$df) * sumCoef[1, 2]
predict(fit6, data.frame(wt=1), interval="confidence")
predict(fit6, data.frame(wt=mean(wt)), interval="confidence")
predict(fit6, data.frame(wt=mean(mtcars$wt)), interval="confidence")
fit6 <- lm(mpg ~ I(wt*1/2)-1, mtcars)
fit6 <- lm(mpg ~ I(wt*1/2), mtcars)
predict(fit6, data.frame(wt=mean(mtcars$wt)), interval="confidence")
predict(fit6, data.frame(wt=2000, interval="confidence")
predict(fit6, data.frame(wt=2000), interval="confidence")
predict(fit6, data.frame(wt=2000), interval="confidence")
predict(fit6, data.frame(wt=1000), interval="confidence")
fit3 <- lm(mpg~wt,mtcars)
predict(fit3, data.frame(wt=1), interval="confidence")
predict(fit3, data.frame(wt=2), interval="confidence")
data(mtcars)
data(mtcars)
fit6 <- lm(mpg~I(wt*(1/2), data = mtcars)
)
fit6 <- lm(mpg~I(wt*(1/2)), data = mtcars)
predict(fit6, newdata=data.frame(wt=2))
predict(fit6, newdata=data.frame(wt=2), interval="confidence")
newdata=data.frame(wt=2)
summary(fit6)
library(swirl)
swirl
swirl()
ones <- rep(1,nrow(galton))
lm(child ~ ones + parent-1,galton)
library(swirl)
swirl()
lm(child~parent,galton)
lm(child~1,galton)
head(trees)
fit <- lm(Volume~Girth+Height+Constant-1,trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume~Height+Constant-1,trees2)
laaply(list(fit,fit2),coef)
lapply(list(fit,fit2),coef)
all <- lm(Fertility~.,swiss)
summary(all)
lm(Fertility~Agriculture,swiss)
summary(lm(Fertility~Agriculture,swiss))
cor(Examination,Education)
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility~.+ec,swiss)
coef(efit)-coef(all)
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
sa
sA
summary(InsectSprays[,2])
sapply(InsectSprays,str)
sapply(InsectSprays,class)
fit <- lm(count~spray,InsectSprays)
summary(fit)$coef
est <- summary(fit)coef[,1]
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count~spray-1,InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count~spray,InsectSprays)
fit2 <- lm(count~spray2,InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric~Year,hunger)
summary(fit)$coef
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], hunger)
lmM <- lm(Numeric[hunger$Sex=="Male"] ~ Year[hunger$Sex=="Male"], hunger)
lmBoth <- lm(Numeric~Year+Sex,hunger)
summary(lmBoth)
lmInter <- lm(Numeric~Year+Sex+Sex*Year, hunger)
summary(lmInter)
fit <- lm(y~x,out2)
plot(fit,which=1)
fitno <- lm(y~x,out2[-1,])
plot(fitno,which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1,"y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- deviance(fit)/
a
sigma <- deviance(fit)/2
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/(sigma*sqrt(sqrt(1-hatvalues(fit))))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd,rstandard(fit)))
plot(fit,which=3)
plot(fit,which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno,out2) - predict(fit,out2)
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility~.,swiss)
vif(mdl)
mdl2 <- lm(Fertility~Agriculture+Education+Catholic+Infant.Mortality,swiss)
vif(mdl2)
data(mtcars)
head(mtcars)
class(mtcars)
sapply(mtcars,class)
fitq1 <- lm(mpg~factor(cyl)+wt,mtcars)
summary(fitq1)
factor(cyl)
factor(mtcars$cyl)
fitq2 <- lm(mpg~factor(cyl)+wt + wt*factor(cyl),mtcars)
summary(fitq2)
anova(fitq1,fitq2)
fitq4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fitq4)
?mtcars
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fitq5 <- lm(y~x)
hatvalues(fitq5)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fitq6 <- lm(y~x)
dfbeta(fitq6)
dfbetas(fitq6)
?dfbeta
summary(fitq4)
summary(fitq4)
fitq4a <- lm(formula = mpg ~ wt + factor(cyl), data = mtcars)
summary(fitq4a)
?mtcars
fita1 <- lm(mpg ~ factor(am),mtcars)
summary(fita1)
plot(fita1)
?mtcars
fita2 <- lm(mpg ~ .,mtcars)
summary(fita2)
pairs(fita1)
data(mtcars)
lm(mpg~factor(am), mtcars)
summary(lm(mpg~factor(am), mtcars))
summary(lm(mpg~., mtcars))
summary(lm(mpg~factor(am)-1, mtcars))
summary(lm(mpg~factor(am), mtcars))
pairs(lm(mpg~., mtcars))
plot(lm(mpg~., mtcars))
plot(lm(mpg~factor(am), mtcars))
plot(mtcars)
plot(mtcars$mpg,mtcars$am)
plot(mtcars$mpg,mtcars$am, type="l")
hist(mtcars$mpg)
library(ggplot2)
density(mtcars$mpg)
plot(density(mtcars$mpg))
?density
View(mtcars)
str(mtcars)
boxplot(mpg~am,data=mtcars)
?mtcars
?step
stepmodel = step(lm(data = mtcars, mpg ~ .))
summary(stepmodel)
plot(stepmodel)
model <- lm(mpg~wt + qsec + factor(am), data = mtcars)
summary(model)
?relevel
cars2 <- mtcars
model <- lm(formula = mpg ~ factor(am):wt + factor(am):qsec, data = mtcars)
summary(model)
model <- lm(formula = mpg ~ factor(am):wt + factor(am):qsec-1, data = mtcars)
summary(model)
model <- lm(formula = mpg ~ factor(am):wt + factor(am):qsec, data = mtcars)
summary(model)
onemodel <- lm(mpg~factor(am),mtcars)
summary(onemodel)
?step
stepmodel = step(lm(data = mtcars, mpg ~ .),direction="both")
summary(stepmodel)
?mtcars
model2 <- lm(mpg~wt+am,mtcars)
summary(model2)
model2 <- lm(mpg~wt+factor(am),mtcars)
model2 <- lm(mpg~wt+factor(am),mtcars))
model2 <- lm(mpg~wt+factor(am),mtcars)
summary(model2)
model2 <- lm(mpg~wt+factor(am)-1,mtcars)
summary(model2)
?step
stepmodel = step(lm(data = mtcars, mpg ~ .),direction="both")
model <- lm(formula = mpg ~ am + wt+ qsec+ factor(am):wt + factor(am):qsec-1, data = mtcars)
install.packages("effects")
library(effects)
plot(effect("wt:am",model),multiline=TRUE)
plot(effect("wt:factor(am)",model),multiline=TRUE)
plot(effect("factor(am):wt",model),multiline=TRUE)
plot(effect("factor(am):wt",model),multiline=TRUE)
model <- lm(formula = mpg ~ am + wt+ qsec+ am:wt + am:qsec, data = mtcars)
summary(model)
model <- lm(formula = mpg ~ am + wt+ qsec+ factor(am):wt + factor(am):qsec-1, data = mtcars)
model <- lm(formula = mpg ~ am + wt+ qsec+ factor(am):wt + factor(am):qsec, data = mtcars)
summary(model)
model <- lm(formula = mpg ~ factor(am) + wt+ qsec+ factor(am):wt + factor(am):qsec, data = mtcars)
summary(model)
model <- lm(formula = mpg ~ factor(am) + wt+ qsec+ factor(am):wt + factor(am):qsec, data = mtcars)
plot(effect("factor(am):wt",model),multiline=TRUE)
plot(effect("factor(am):qsec",model),multiline=TRUE)
plot(effect("mpg:factor(am",model),multiline=TRUE)
plot(effect("mpg:factor(am)",model),multiline=TRUE)
library(car)
scatterplot(mpg~am+wt+qsec,data=mtcars)
scatterplot(mpg~am,data=mtcars)
anova(model)
model <- lm(formula = mpg ~ factor(am) + wt+ qsec+ factor(am):wt + factor(am):qsec, data = mtcars)
anova(model)
summary(model)
model <- lm(mpg~am, mtcars)
summary(model)
model <- lm(mpg~factor(am), mtcars)
summary(model)
class(mtcars)
class(mtcars[])
class(mtcars[1,])
class(mtcars[,1])
str(mtcars)
unique(mtcars$am)
?mtcars
levels(mtcars$am) <- c("Automatic", "Manual")
str(mtcars)
model <- lm(mpg~am,mtcars)
summary(model)
model <- lm(mpg~factor(am),mtcars)
summary(model)
model <- lm(mpg~factor(am)-1,mtcars)
summary(model)
model <-  lm(formula = mpg ~ factor(am):wt + factor(am):qsec, data = mtcars)
summary(model)
model <-  lm(formula = mpg ~ factor(am):wt + factor(am):qsec-1, data = mtcars)
summary(model)
model <- lm(formula = mpg ~ am + wt + qsec, data = mtcars)
summary(model)
anova(model)
model <- lm(formula = mpg ~ am + wt + qsec, data = mtcars)
summary(model)
stepmodel = step(lm(data = mtcars, mpg ~ .))
?t.test
?subset
?mtcars
?t.test
?effects
library(effects)
?effect
summary(model)
data(mtcars)
fit <- lm(mpg~am,mtcars)
summary(fit)
summary(fit)$r.squared
summary(fit)$coef
summary(fit)$ar.squared
summary(fit)$adjusted.r.squared
summary(fit)$adjust.r.squared
str(summary(fit))
summary(fit)$adj.r.squared
test <- t.test(mpg~am,data=mtcars)
summary(test)
str(test)
test$p.value
test$alternative
summary(str(mtcars))
library(shiny)
install.packages("rcharts")
install_github("rCharts","ramnathv")
update.packages("devtools")
library(devtools)
install_github("rCharts","ramnathv")
libary(rcharts)
library(rcharts)
library(rCharts)
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='yoke', token='0192E0BD5A253565777B47847DB4ABF2', secret='q2xNG5dnflQZ087z/R3NTlG4l1eRzMLU5ALqPD04')
install.packages('googleVis')
library(googleVis)
?dTable
library(rCharts)
?dTable
?d
data(airquality)
str(airquality)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
View(predictors)
str(predictors)
str(diagnosis)
length(diagnosis)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
str(training)
library(Hmisc)
qplot(CompressiveStrength,inTrain,data=training)
?cut2
qplot(CompressiveStrength,inTrain,data=training,colour=Water)
qplot(CompressiveStrength,inTrain,data=training,colour=FlyAsh)
qplot(CompressiveStrength,inTrain,data=training,colour=FlyAsh) + geom_smooth(method='lm',formula=y~x)
qplot(CompressiveStrength,inTrain,data=training,colour=Age) + geom_smooth(method='lm',formula=y~x)
qplot(inTrain,CompressiveStrength,data=training,colour=Age) + geom_smooth(method='lm',formula=y~x)
qplot(inTrain,CompressiveStrength,data=training,colour=Cement) + geom_smooth(method='lm',formula=y~x)
qplot(inTrain,CompressiveStrength,data=training,colour=cut2(training$Cement,g=4) + geom_smooth(method='lm',formula=y~x)
qplot(inTrain,CompressiveStrength,data=training,colour=cut2(training$Cement,g=4) + geom_smooth(method='lm',formula=y~x)
qplot(inTrain,CompressiveStrength,data=training,colour=cut2(training$Cement,g=4)) + geom_smooth(method='lm',formula=y~x)
qplot(inTrain,CompressiveStrength,data=training,colour=cut2(training$Age,g=4)) + geom_smooth(method='lm',formula=y~x)
qplot(inTrain,CompressiveStrength,data=training,colour=cut2(training$FlyAsh,g=4)) + geom_smooth(method='lm',formula=y~x)
qplot(inTrain,CompressiveStrength,data=training,colour=cut2(training$Water,g=4)) + geom_smooth(method='lm',formula=y~x)
?cut2
qplot(inTrain,CompressiveStrength,data=training,colour=cut2(training$Cement,m=20)) + geom_smooth(method='lm',formula=y~x)
qplot(inTrain,CompressiveStrength,data=training,colour=cut2(training$Cement,m=20))
qplot(inTrain,CompressiveStrength,data=training,colour=cut2(training$Age,m=20))
qplot(inTrain,CompressiveStrength,data=training,colour=cut2(training$FlyAsh,m=20))
qplot(CompressiveStrength,data=training,colour=cut2(training$FlyAsh,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$FlyAsh,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$Age,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$Cement,m=20))
plot(mixtures$CompressiveStrength,pch=1,col=cut2(mixtures$FlyAsh,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$Age,m=20))
qplot(CompressiveStrength,data=training
)
qplot(log(CompressiveStrength),data=training)
qplot(log(CompressiveStrength+1),data=training)
qplot(log(CompressiveStrength),data=training)
0.75*208
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
?grep
grep("^IL",names(training))
grepl("^IL",names(training))
names(training[grep("^IL",names(training),])
names(training[,grep("^IL",names(training)])
names(training[,grep("^IL",names(training))]
)
names(training[,grep("^IL",names(training))])
View(training)
grepl("^IL",names(training))
grep("^IL",names(training))
varIL <- grep("^IL",names(training))
ilOnly <- training[,varIL]
ilpp <- preProcess(ilOnly, method="pca")
ilpp
?preProcess
ilpp <- preProcess(ilOnly, method="pca", thresh=0.9)
ilpp
summary(ilpp)
str(ilOnly)
trainingIL <- data.frame(diagnosis, ilOnly)
str(training)
grep("diagnosis",training)
grep("diagnosis",names(training))
varIL
class(varIL)
nrow(varIL)
ncol(varIL)
varILD <- c(1,varIL)
varILD
trainingIL <- training[,varILD]
str(trainingIL)
modelFitAll <- training(training$diagnosis~.,method="glm",preProcess="pca",data=training)
modelFitAll <- train(training$diagnosis~.,method="glm",preProcess="pca",data=training)
View(training)
library(caret)
modelFitAll <- train(training$diagnosis~.,method="glm",preProcess="pca",data=training)
library(e1071)
find.packages("e1071")
?train
preProcAll <- preProcess(training[,-1],method="pca")
preProcAll <- preProcess(log10(training[,-1]+1),method="pca")
View(testing)
diagnosis
as.numeric.factor(diagnosis)
as.numeric(levels(diagnosis))[diagnosis]
as.numeric(diagnosis)
as.numeric(levels(diagnosis))[diagnosis]
as.numeric(levels(diagnosis))
?trainControl
pca80 <- trainControl(PCAthresh=0.8)
pca80 <- trainControl(preProcOptions=list(thresh=0.8))
modelFitAll <- train(training$diagnosis~.,method="glm",preProcess="pca",data=training,trControl=pca80)
install.packages("e1071")
library(e1071)
modelFitAll <- train(training$diagnosis~.,method="glm",preProcess="pca",data=training,trControl=pca80)
modelFitIL <- train(trainingIL$diagnosis~.,method="glm",preProcess="pca",data=trainingIL,trControl=pca80)
confusionMatrix(testing$diagnosis,predict(modelFitAll,testing))
confusionMatrix(testing$diagnosis,predict(modelFitIL,testing))
modelFitILNoPCA <- train(training$diagnosis~.,method="glm",data=trainingIL,trControl=pca80)
confusionMatrix(testing$diagnosis,predict(modelFitILNoPCA,testing))
install.packages("RCurl")
install.packages("RJSONIO")
library(plyr)
source('~/.active-rstudio-document')
address <- geoCode("Marina Bay Financial Centre, Singapore")
address
class(address)
address <- c("The White House, Washington, DC","The Capitol, Washington, DC")
locations <- ldply(address, function(x) geoCode(x))
names(locations) <- c("lat","lon","location_type", "forAddress")
locations
class(locations)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?setwd()
getwd()
setwd(C:/Users/yoke/Desktop/ds/DDP)
setwd("C:/Users/yoke/Desktop/ds/DDP")
shiny::runApp()
